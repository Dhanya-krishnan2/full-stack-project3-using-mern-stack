{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\dhany\\\\OneDrive\\\\Desktop\\\\full-stack-project-MERN-Stack-order-me\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\dhany\\\\OneDrive\\\\Desktop\\\\full-stack-project-MERN-Stack-order-me\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\dhany\\\\OneDrive\\\\Desktop\\\\full-stack-project-MERN-Stack-order-me\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\dhany\\\\OneDrive\\\\Desktop\\\\full-stack-project-MERN-Stack-order-me\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\dhany\\\\OneDrive\\\\Desktop\\\\full-stack-project-MERN-Stack-order-me\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\dhany\\\\OneDrive\\\\Desktop\\\\full-stack-project-MERN-Stack-order-me\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\dhany\\\\OneDrive\\\\Desktop\\\\full-stack-project-MERN-Stack-order-me\\\\client\\\\src\\\\pages\\\\Email\\\\Email.js\";\nimport ApplicationContext from \"../../ApplicationContext\";\nimport React, { Component } from \"react\"; // import { Col, Row, Container } from \"../../components/Grid\";\n\nimport { Input, TextArea } from \"../../components/Form\";\nimport \"./Email.css\";\nimport TextField from '@material-ui/core/TextField';\nimport API from \"../../utils/API\";\nimport { Redirect } from 'react-router-dom';\n\nvar moment = require('moment');\n\nvar Email =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Email, _Component);\n\n  function Email() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Email);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Email)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      eventName: \"\",\n      eventDateTime: \"\",\n      orderDateTime: \"\",\n      restaurantName: \"\",\n      restaurantMenuURL: \"\",\n      sendToEmail: [],\n      fromName: \"\",\n      message: \"\",\n      user: _this.context.user,\n      formEmailSent: false\n    };\n\n    _this.handleInputChange = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleFormSubmit = function (event) {\n      event.preventDefault();\n      console.log(\"button clicked\");\n\n      _this.sendEmail(\"default_service\", \"template_UtW4u8r2\", _this.state.eventName, _this.state.eventDateTime, _this.state.orderDateTime, _this.state.restaurantName, _this.state.restaurantMenuURL, _this.state.sendToEmail, _this.state.fromName, _this.state.message, _this.state.user._id);\n\n      _this.setState({\n        formSubmitted: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Email, [{\n    key: \"sendEmail\",\n    value: function sendEmail(service_id, template, eventName, eventDateTime, orderDateTime, restaurantName, restaurantMenuURL, sendToEmail, fromName, message, hostId) {\n      var _this2 = this;\n\n      console.log(hostId);\n      API.saveEvent({\n        eventName: this.state.eventName,\n        hostId: hostId,\n        eventDateTime: this.state.eventDateTime,\n        orderDateTime: this.state.orderDateTime,\n        restaurantName: this.state.restaurantName,\n        restaurantMenuURL: this.state.restaurantMenuURL,\n        sendToEmail: this.state.sendToEmail,\n        fromName: this.state.fromName,\n        message: this.state.message\n      }).then(function (eventDb) {\n        console.log(eventDb);\n        var sendToEmail = eventDb.data.sendToEmail;\n        var emailArray = sendToEmail.split(/[ ,]+/);\n        var newOrders = emailArray.map(function (email) {\n          return {\n            eventID: eventDb.data._id,\n            email: email,\n            date: moment().format('MMMM Do YYYY, h:mm:ss a')\n          };\n        });\n        var template_params = {\n          event_name: eventName,\n          event_id: eventDb.data._id,\n          event_date: eventDateTime,\n          order_date: orderDateTime,\n          restaurant_name: restaurantName,\n          restaurant_menu_URL: restaurantMenuURL,\n          to_email: sendToEmail,\n          from_name: fromName,\n          order_me_this_event_link: \"\".concat(window.location.protocol, \"//\").concat(window.location.host, \"/event\"),\n          message_html: message\n        };\n        window.emailjs.send(service_id, template, template_params).then(function (res) {\n          alert(\"Sent!\");\n          API.createNewOrder(newOrders).then(function (orderDb) {\n            return _this2.setState({\n              formEmailSent: true\n            });\n          });\n        });\n      }).catch(function (err) {\n        return alert('Failed to send email. Error: ', err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.formEmailSent) {\n        return React.createElement(Redirect, {\n          to: \"/myEvents/\".concat(this.state.user._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \"Name your event to save it and find it easier later.\"), React.createElement(Input, {\n          value: this.state.eventName,\n          onChange: this.handleInputChange,\n          name: \"eventName\",\n          placeholder: \"Event Name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }), React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, \"Separate emails by a comma (ex. Joe@gmail.com, Mandy@email.com).\"), React.createElement(TextArea, {\n          value: this.state.sendToEmail,\n          onChange: this.handleInputChange,\n          name: \"sendToEmail\",\n          placeholder: \"Send To Email (required)\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }), React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"Fill out some details for the invitations.\"), React.createElement(Input, {\n          value: this.state.restaurantName,\n          onChange: this.handleInputChange,\n          name: \"restaurantName\",\n          placeholder: \"Name of Restaurant\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }), React.createElement(Input, {\n          value: this.state.restaurantMenuURL,\n          onChange: this.handleInputChange,\n          name: \"restaurantMenuURL\",\n          id: \"inputEmailInvite\",\n          placeholder: \"Restaurant Menu Link\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }), React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, \"Hover and click the arrow to choose a calendar date. Enter a time. Invitation needs a date and time to send.\"), React.createElement(\"div\", {\n          className: \"row text-fields px-3 mb-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col d-flex textFieldBorder\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          id: \"datetime-local\",\n          label: \"Date/Time of Event\",\n          type: \"datetime-local\",\n          onChange: this.handleInputChange,\n          value: this.state.eventDateTime ? this.state.eventDateTime : \"\",\n          name: \"eventDateTime\",\n          InputLabelProps: {\n            shrink: true\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"col d-flex textFieldBorder\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          id: \"datetime-local\",\n          label: \"Order Must Be Placed By\",\n          type: \"datetime-local\",\n          onChange: this.handleInputChange,\n          value: this.state.orderDateTime ? this.state.orderDateTime : \"\",\n          name: \"orderDateTime\",\n          InputLabelProps: {\n            shrink: true\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }))), React.createElement(TextArea, {\n          value: this.state.message,\n          onChange: this.handleInputChange,\n          name: \"message\",\n          placeholder: \"Email Message(Optional)\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"d-flex align-items-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"emailLetterText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, \"From \"), React.createElement(Input, {\n          value: this.state.fromName,\n          onChange: this.handleInputChange,\n          name: \"fromName\",\n          placeholder: \"From Name (Optional)\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"row d-flex justify-content-end\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-general mx-3\",\n          disabled: !(this.state.sendToEmail && this.state.eventName && this.state.restaurantName && this.state.eventDateTime && this.state.orderDateTime),\n          onClick: this.handleFormSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, \"Send\"))))));\n      }\n\n      ;\n    }\n  }]);\n\n  return Email;\n}(Component);\n\nEmail.contextType = ApplicationContext;\nexport default Email;","map":{"version":3,"sources":["C:\\Users\\dhany\\OneDrive\\Desktop\\full-stack-project-MERN-Stack-order-me\\client\\src\\pages\\Email\\Email.js"],"names":["ApplicationContext","React","Component","Input","TextArea","TextField","API","Redirect","moment","require","Email","state","eventName","eventDateTime","orderDateTime","restaurantName","restaurantMenuURL","sendToEmail","fromName","message","user","context","formEmailSent","handleInputChange","event","target","name","value","setState","handleFormSubmit","preventDefault","console","log","sendEmail","_id","formSubmitted","service_id","template","hostId","saveEvent","then","eventDb","data","emailArray","split","newOrders","map","email","eventID","date","format","template_params","event_name","event_id","event_date","order_date","restaurant_name","restaurant_menu_URL","to_email","from_name","order_me_this_event_link","window","location","protocol","host","message_html","emailjs","send","res","alert","createNewOrder","orderDb","catch","err","shrink","contextType"],"mappings":"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","sourcesContent":["import ApplicationContext from \"../../ApplicationContext\";\r\nimport React, { Component } from \"react\";\r\n// import { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, TextArea } from \"../../components/Form\";\r\nimport \"./Email.css\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport API from \"../../utils/API\";\r\nimport { Redirect } from 'react-router-dom';\r\nconst moment = require('moment');\r\n\r\n\r\nclass Email extends Component {\r\n    static contextType = ApplicationContext;\r\n    state = {\r\n        eventName: \"\",\r\n        eventDateTime: \"\",\r\n        orderDateTime: \"\",\r\n        restaurantName: \"\",\r\n        restaurantMenuURL: \"\",\r\n        sendToEmail: [],\r\n        fromName: \"\",\r\n        message: \"\",\r\n        user: this.context.user,\r\n        formEmailSent: false\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        console.log(\"button clicked\")\r\n        this.sendEmail(\r\n            \"default_service\",\r\n            \"template_UtW4u8r2\",\r\n            this.state.eventName,\r\n            this.state.eventDateTime,\r\n            this.state.orderDateTime,\r\n            this.state.restaurantName,\r\n            this.state.restaurantMenuURL,\r\n            this.state.sendToEmail,\r\n            this.state.fromName,\r\n            this.state.message,\r\n            this.state.user._id\r\n        )\r\n        this.setState({\r\n            formSubmitted: true\r\n        })\r\n    }\r\n\r\n    sendEmail(service_id, template, eventName, eventDateTime, orderDateTime, restaurantName, restaurantMenuURL, sendToEmail, fromName, message, hostId) {\r\n        console.log(hostId);\r\n        API.saveEvent({\r\n            eventName: this.state.eventName,\r\n            hostId: hostId,\r\n            eventDateTime: this.state.eventDateTime,\r\n            orderDateTime: this.state.orderDateTime,\r\n            restaurantName: this.state.restaurantName,\r\n            restaurantMenuURL: this.state.restaurantMenuURL,\r\n            sendToEmail: this.state.sendToEmail,\r\n            fromName: this.state.fromName,\r\n            message: this.state.message\r\n        })\r\n            .then(eventDb => {\r\n                console.log(eventDb);\r\n                let sendToEmail = eventDb.data.sendToEmail;\r\n                let emailArray = sendToEmail.split(/[ ,]+/);\r\n                let newOrders = emailArray.map(email => {\r\n                    return {\r\n                        eventID: eventDb.data._id,\r\n                        email: email,\r\n                        date: moment().format('MMMM Do YYYY, h:mm:ss a')\r\n                    }\r\n                });\r\n                var template_params = {\r\n                    event_name: eventName,\r\n                    event_id: eventDb.data._id,\r\n                    event_date: eventDateTime,\r\n                    order_date: orderDateTime,\r\n                    restaurant_name: restaurantName,\r\n                    restaurant_menu_URL: restaurantMenuURL,\r\n                    to_email: sendToEmail,\r\n                    from_name: fromName,\r\n                    order_me_this_event_link: `${window.location.protocol}//${window.location.host}/event`,\r\n                    message_html: message\r\n                }\r\n                window.emailjs.send(\r\n                    service_id,\r\n                    template,\r\n                    template_params\r\n                ).then(res => {\r\n                    alert(\"Sent!\");\r\n                    API.createNewOrder(newOrders).then(orderDb => this.setState({ formEmailSent: true }));\r\n\r\n                })\r\n            })\r\n            .catch(err => alert('Failed to send email. Error: ', err))\r\n    }\r\n\r\n    render() {\r\n        if (this.state.formEmailSent) {\r\n            return <Redirect to={`/myEvents/${this.state.user._id}`} />;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <form>\r\n                                <small>Name your event to save it and find it easier later.</small>\r\n                                <Input\r\n                                    value={this.state.eventName}\r\n                                    onChange={this.handleInputChange}\r\n                                    name=\"eventName\"\r\n                                    placeholder=\"Event Name\"\r\n                                />\r\n                                <small>Separate emails by a comma (ex. Joe@gmail.com, Mandy@email.com).</small>\r\n                                <TextArea\r\n                                    value={this.state.sendToEmail}\r\n                                    onChange={this.handleInputChange}\r\n                                    name=\"sendToEmail\"\r\n                                    placeholder=\"Send To Email (required)\"\r\n                                />\r\n                                <small>Fill out some details for the invitations.</small>\r\n                                <Input\r\n                                    value={this.state.restaurantName}\r\n                                    onChange={this.handleInputChange}\r\n                                    name=\"restaurantName\"\r\n                                    placeholder=\"Name of Restaurant\"\r\n                                />\r\n                                <Input\r\n                                    value={this.state.restaurantMenuURL}\r\n                                    onChange={this.handleInputChange}\r\n                                    name=\"restaurantMenuURL\"\r\n                                    id=\"inputEmailInvite\"\r\n                                    placeholder=\"Restaurant Menu Link\"\r\n                                />\r\n                                <small>Hover and click the arrow to choose a calendar date. Enter a time.\r\n                               Invitation needs a date and time to send.</small>\r\n                                <div className=\"row text-fields px-3 mb-3\">\r\n                                    <div className=\"col d-flex textFieldBorder\">\r\n                                        <TextField\r\n                                            id=\"datetime-local\"\r\n                                            label=\"Date/Time of Event\"\r\n                                            type=\"datetime-local\"\r\n                                            onChange={this.handleInputChange}\r\n                                            value={this.state.eventDateTime ? this.state.eventDateTime : \"\"}\r\n                                            name=\"eventDateTime\"\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col d-flex textFieldBorder\">\r\n                                        <TextField\r\n                                            id=\"datetime-local\"\r\n                                            label=\"Order Must Be Placed By\"\r\n                                            type=\"datetime-local\"\r\n                                            onChange={this.handleInputChange}\r\n                                            value={this.state.orderDateTime ? this.state.orderDateTime : \"\"}\r\n                                            name=\"orderDateTime\"\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <TextArea\r\n                                    value={this.state.message}\r\n                                    onChange={this.handleInputChange}\r\n                                    name=\"message\"\r\n                                    placeholder=\"Email Message(Optional)\"\r\n                                />\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <p className=\"emailLetterText\">\r\n                                        From </p>\r\n                                    <Input\r\n                                        value={this.state.fromName}\r\n                                        onChange={this.handleInputChange}\r\n                                        name=\"fromName\"\r\n                                        placeholder=\"From Name (Optional)\"\r\n                                    /></div>\r\n                                <div className=\"row d-flex justify-content-end\">\r\n                                    {/* <Link className=\"navbar-brand\" to=\"/confirm\">\r\n                                    <div type=\"submit\"\r\n                                        className=\"btn btn-general\"\r\n                                        disabled={!(this.state.sendToEmail &&\r\n                                            this.state.eventName &&\r\n                                            this.state.restaurantName &&\r\n                                            this.state.eventDateTime &&\r\n                                            this.state.orderDateTime)}\r\n                                        onClick={this.handleFormSubmit}>\r\n                                        Confirm</div>\r\n                                </Link> */}\r\n                                    <button\r\n                                        className=\"btn btn-general mx-3\"\r\n                                        disabled={!(this.state.sendToEmail &&\r\n                                            this.state.eventName &&\r\n                                            this.state.restaurantName &&\r\n                                            this.state.eventDateTime &&\r\n                                            this.state.orderDateTime)}\r\n                                        onClick={this.handleFormSubmit}>\r\n                                        Send\r\n                                </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        };\r\n    }\r\n}\r\n\r\nexport default Email;\r\n"]},"metadata":{},"sourceType":"module"}